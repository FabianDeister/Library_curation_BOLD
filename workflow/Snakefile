# Read configuration file
configfile: "config/config.yml"

# Rule for creating the database and loading BCDM
rule create_load_db:
    input:
        bold_tsv=config["BOLD_TSV"],
        schema=config["SCHEMA"]
    output: config["DB_FILE"]
    params: log_level=config['LOG_LEVEL']
    log: "logs/create_load_db.log"
    conda: "envs/create_load_db.yaml"
    shell:
        "perl workflow/scripts/load_bcdm.pl \
            --tsv {input.bold_tsv} \
            --db {output} \
            --sql {input.schema} \
            --log {params.log_level} \
            --force 2> {log}"

rule load_criteria:
    input:
        criteria="resources/criteria.tsv",
        db=config["DB_FILE"]
    output:
        "results/criteria_loaded.ok"
    log: "logs/load_criteria.log"
    conda: "envs/sqlite.yaml"
    shell:
        """
        sqlite3 {input.db} <<CRITERIA
.mode tabs
.import {input.criteria} criteria
.quit
CRITERIA
2> {log} && touch {output}
        """

# Rule for applying indexes to the database
rule apply_indexes:
    input:
        indexes=config["INDEXES"],
        db=config["DB_FILE"],
    output: config["DB_FILE_INDEXED"]
    log: "logs/apply_indexes.log"
    conda: "envs/sqlite.yaml"
    shell:
        """
        sqlite3 {input.db} < {input.indexes} 2> {log} && touch {output}
        """

# Rule for producing the object-relational mapping
# XXX: This is not needed until BCDM changes
#rule produce_orm:
#    output:
#        directory="../lib"
#    shell:
#        """
#        dbicdump -o dump_directory=../lib BCDM::ORM 'dbi:SQLite:dbname={config[DB_FILE]}'
#        """

# Rule for loading taxonomy into the database
rule load_taxonomy:
    input:
        db=config["DB_FILE"]
    output:
        "results/taxonomy_loaded.ok"
    params:
        log_level=config['LOG_LEVEL'],
        libs=config["LIBS"]
    log: "logs/load_taxonomy.log"
    conda: "envs/load_taxonomy.yaml"
    shell:
        """
        perl -I{params.libs} workflow/scripts/load_taxonomy.pl \
            --db {input.db} \
            --log {params.log_level} 2> {log} && touch {output}
        """

# Rule for importing the target list and mapping to taxonomy
# XXX: This is not needed until the target list export is ready
# rule import_target_list_perl:
#     input:
#         perl_script="scripts/load_targetlist.pl",
#         targetlist="../resources/all_specs_and_syn.csv",
#         db="../results/bold.db"
#     output:
#         target="target_loaded.txt"
#     shell:
#         """
#         perl {input.perl_script} \\
#             --list {input.targetlist} \\
#             --db {input.db} \\
#             --log KINGDOM \\
#             --project {config[PROJECT_NAME]} \\
#             --taxon {config[TAXON_LEVEL]} \\
#             --kingdom {config[KINGDOM]}
#         """

# Rules for assessing criteria
# COLLECTION_DATE
rule COLLECTION_DATE:
    input:
        db="results/bold.db"
    params:
        log_level=config['LOG_LEVEL'],
        libs=config["LIBS"],
        criterion="COLLECTION_DATE"
    output:
        tsv="results/assessed_COLLECTION_DATE.tsv"
    log: "logs/assess_COLLECTION_DATE.log"
    conda: "envs/assess_criteria.yaml"
    shell:
        """
        perl -I{params.libs} workflow/scripts/assess_criteria.pl \
            --db {input.db} \
            --log {params.log_level} \
            --criteria {params.criterion} \
            2> {log} > {output.tsv}
        """

# TODO: Add rules for the other criteria

rule concatenate:
    input:
        date = rules.COLLECTION_DATE.output.tsv
        # TODO: Add the other criteria
    output:
        concat="CONCATENATED.tsv"
    shell:
        """
        # TODO: Add the other criteria
        perl workflow/scripts/concat_tsvs.pl {input.date} > {output.concat}
        """

rule import_concatenated:
    input:
        concat="CONCATENATED.tsv",
        db="results/bold.db"
    output:
        "results/concatenated_imported.ok"
    conda: "envs/sqlite.yaml"
    log: "logs/import_concatenated.log"
    shell:
        """
sqlite3 {input.db} 2> {log} <<IMPORT
.mode tabs
.import {input.concat}
.quit
IMPORT
touch {output}
        """

# Rule for outputting filtered data in BCDM        
rule output_filtered_data:
    input:
        db="results/bold.db"
    output:
        "results/result_output.tsv"
    conda: "envs/sqlite.yaml"
    log: "logs/output_filtered_data.log"
    shell:
        """
        sqlite3 {input.db} 2> {log} <<EOF
.headers ON        
.mode tabs
.output {output}
.read workflow/scripts/pivot.sql
.quit
EOF
        """




